# This is a basic workflow to help you get started with Actions


name: CI

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: '*/15 * * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      print_tags:
        description: 'True to print to STDOUT'
        required: true
        type: boolean
      tags:
        description: 'Test scenario tags'
        required: true
        type: string
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
      node-version:
        description: 'node-version'
        required: true
        default: '16'
        type: choice
        options:
          - "12"
          - "14"
          - "16"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  print-tag:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.print_tags == 'true' }}
    steps:
      - name: Print the input tag to STDOUT
        run: echo  The tag is ${{ github.event.inputs.tag }}

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 17 ]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Set current datetime as env variable
        env:
          TZ: 'Asia/Tokyo'
        run: echo "CURRENT_DATETIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - uses: actions/checkout@v2
        with:
          node-version: ${{ matrix.node }}
          persist-credentials: true
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - run: |
          set -x
          assets=()
          for asset in ./*.md; do
            assets+=("-a" "$asset")
          done
          tag_name="${CURRENT_DATETIME}${GITHUB_REF##*/}"
          hub release create "${assets[@]}" -pm "$tag_name" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Create new branch
        env:
          GIT_TOKEN: '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'
          GITHUB_TOKEN: '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'
          GITHUB_ACTOR: 'miquolone'
          GIT_REPOSITORY: 'miquolone/test'
        run: |
          git config --global user.name '${GITHUB_ACTOR}'
          git config --global user.email '${GITHUB_ACTOR}@users.noreply.github.com'
          git switch -c release/ABC_${{ env.CURRENT_DATETIME }}_first
          git add -A && git commit -m 'abc' --allow-empty
          git push origin release/ABC_${{ env.CURRENT_DATETIME }}_first

      # echo ~/.git/config
      # git rm --cached test
      # git clone https://miquolone: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@github.com/miquolone/test
      # cd test
      # git remote set-url origin https://miquolone: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@github.com/miquolone/test
      # git clone https://${GITHUB_ACTOR}:${GIT_TOKEN}@github.com/${GIT_REPOSITORY}
      # git config -l
      # git branch -a
      #            && ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitHub -q -N github_pass_phrase_aiueo \
      #            && ssh -T git@github.com \

      #git remote add origin git@github.com:miquolone/test.git
      - name: Create new branch2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "Mona Lisa"
          git switch -c release/ABC_${{ env.CURRENT_DATETIME }}_second
          git branch -a
          git config -l
          git push origin release/ABC_${{ env.CURRENT_DATETIME }}_second
        #ssh-keygen -t rsa -f ~/.ssh/id_rsa_gitHub -q -N github_pass_phrase_aiueo
        # ls ~/.ssh/

      - name: Add and Commit
        uses: EndBug/add-and-commit@v7
        env:
          PR_TITLE: ${{ secrets.GITHUB_TOKEN }}
        with:
          branch: release/ABC_${{ env.CURRENT_DATETIME }}
          message: ${{ env.PR_TITLE }}
      #          add: ${{ env.JSON_FILE_PATH }}

      - name: Create pull request
        env:
          PR_LABEL: "aaaaaaaaa"
          DEST_BRANCH: "main"
        uses: repo-sync/pull-request@v2
        with:
          source_branch: release/ABC_${{ env.CURRENT_DATETIME }}_first
          destination_branch: ${{ env.DEST_BRANCH }}
          pr_title: ${{ env.PR_TITLE }}
          pr_template: ${{ env.PR_TEMPLATE }}
          pr_label: ${{ env.PR_LABEL }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pr_reviewer: "miquolone"
          pr_assignee: "miquolone"
          pr_milestone: ""
          pr_draft: false
          pr_allow_empty: true


      - name: show env.se
        run: echo ${{ secrets.KEY }}

      - name: show env.actions
        run: echo ${{ secrets.actions}}

      - shell: bash
        env:
          SUPER_SECRET: ${{ secrets.KEY }}
        run: |
          echo "$SUPER_SECRET"

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
